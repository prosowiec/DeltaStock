
def get_sql_merge_fillings(pathToSource):
    sql_merge_fillings = ' '.join((
                f'MERGE INTO {pathToSource} as filings',
                f"USING filings_updates",
                "ON filings.accessionNumber = filings_updates.accessionNumber",
                "WHEN MATCHED THEN",
                "  UPDATE SET",
                "    accessionNumber = filings_updates.accessionNumber,",
                "    filingDate = filings_updates.filingDate,",
                "    reportDate = filings_updates.reportDate,",
                "    acceptanceDateTime = filings_updates.acceptanceDateTime,",
                "    act = filings_updates.act,",
                "    form = filings_updates.form,",
                "    fileNumber = filings_updates.fileNumber,",
                "    filmNumber = filings_updates.filmNumber,",
                "    items = filings_updates.items,",
                "    size = filings_updates.size,",
                "    isXBRL = filings_updates.isXBRL,",
                "    isInlineXBRL = filings_updates.isInlineXBRL,",
                "    primaryDocument = filings_updates.primaryDocument,",
                "    primaryDocDescription = filings_updates.primaryDocDescription,",
                "    fileURL = filings_updates.fileURL,",
                "    yearMonthDay = filings_updates.yearMonthDay,",
                "    ticker = filings_updates.ticker",
                "WHEN NOT MATCHED THEN",
                "  INSERT (",
                "    accessionNumber,",
                "    filingDate,",
                "    reportDate,",
                "    acceptanceDateTime,",
                "    act,",
                "    form,",
                "    fileNumber,",
                "    filmNumber,",
                "    items,",
                "    size,",
                "    isXBRL,",
                "    isInlineXBRL,",
                "    primaryDocument,",
                "    primaryDocDescription,",
                "    fileURL,",
                "    yearMonthDay,",
                "    ticker",
                "  )",
                "  VALUES (",
                "    filings_updates.accessionNumber,",
                "    filings_updates.filingDate,",
                "    filings_updates.reportDate,",
                "    filings_updates.acceptanceDateTime,",
                "    filings_updates.act,",
                "    filings_updates.form,",
                "    filings_updates.fileNumber,",
                "    filings_updates.filmNumber,",
                "    filings_updates.items,",
                "    filings_updates.size,",
                "    filings_updates.isXBRL,",
                "    filings_updates.isInlineXBRL,",
                "    filings_updates.primaryDocument,",
                "    filings_updates.primaryDocDescription,",
                "    filings_updates.fileURL,",
                "    filings_updates.yearMonthDay,",
                "    filings_updates.ticker",
                "  );"
            ))
    
    return sql_merge_fillings
    
#["fy"x, "endFormat"x, "startFormat", "diffDate"]
def get_sql_merge_facts(pathToSource):
    
    sql_merge_facts = ' '.join((
    f'MERGE INTO {pathToSource} as company_facts',
    "USING company_facts_updates",
    "ON company_facts.accn = company_facts_updates.accn",
    "WHEN MATCHED THEN",
    "  UPDATE SET",
    "    finType = company_facts_updates.finType,",
    "    label = company_facts_updates.label,",
    "    description = company_facts_updates.description,",
    "    end = company_facts_updates.end,",
    "    val = company_facts_updates.val,",
    "    accn = company_facts_updates.accn,",
    "    fp = company_facts_updates.fp,",
    "    form = company_facts_updates.form,",
    "    filed = company_facts_updates.filed,",
    "    frame = company_facts_updates.frame,",
    "    start = company_facts_updates.start,",
    "    monthWindow = company_facts_updates.monthWindow,",
    "    yearMonthDay = company_facts_updates.yearMonthDay",
    "WHEN NOT MATCHED THEN",
    "  INSERT (",
    "    finType,",
    "    label,",
    "    description,",
    "    end,",
    "    val,",
    "    accn,",
    "    fp,",
    "    form,",
    "    filed,",
    "    frame,",
    "    start,",
    "    monthWindow,",
    "    yearMonthDay",
    "  )",
    "  VALUES (",
    "    company_facts_updates.finType,",
    "    company_facts_updates.label,",
    "    company_facts_updates.description,",
    "    company_facts_updates.end,",
    "    company_facts_updates.val,",
    "    company_facts_updates.accn,",
    "    company_facts_updates.fp,",
    "    company_facts_updates.form,",
    "    company_facts_updates.filed,",
    "    company_facts_updates.frame,",
    "    company_facts_updates.start,",
    "    company_facts_updates.monthWindow,",
    "    company_facts_updates.yearMonthDay",
    "  );"))
    
    return sql_merge_facts


def get_sql_merge_price(pathToSource):
    sql = ' '.join((
    f'MERGE INTO {pathToSource} as stock_prices',
    "USING stock_prices_updates",
    "ON stock_prices.ticker = stock_prices_updates.ticker and stock_prices.yearMonthDay = stock_prices_updates.yearMonthDay",
    "WHEN MATCHED THEN",
    "  UPDATE SET",
    "    adjClose = stock_prices_updates.adjClose,",
    "    ticker = stock_prices_updates.ticker,",
    "    quarter_meanADJclose = stock_prices_updates.quarter_meanADJclose,",
    "    yearMonthDay = stock_prices_updates.yearMonthDay",
    "WHEN NOT MATCHED THEN",
    "  INSERT (",
    "    adjClose,",
    "    ticker,",
    "    quarter_meanADJclose,",
    "    yearMonthDay",
    "  )",
    "  VALUES (",
    "    stock_prices_updates.adjClose,",
    "    stock_prices_updates.ticker,",
    "    stock_prices_updates.quarter_meanADJclose,",
    "    stock_prices_updates.yearMonthDay",
    "  );"
        ))
    
    return sql